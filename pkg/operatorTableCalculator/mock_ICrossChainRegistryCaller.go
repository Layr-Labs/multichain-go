// Code generated by mockery v2.42.3. DO NOT EDIT.

package operatorTableCalculator

import (
	"math/big"

	"github.com/Layr-Labs/eigenlayer-contracts/pkg/bindings/ICrossChainRegistry"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/stretchr/testify/mock"
)

// MockICrossChainRegistryCaller is an autogenerated mock type for the ICrossChainRegistryCaller type
type MockICrossChainRegistryCaller struct {
	mock.Mock
}

// GetActiveGenerationReservationCount provides a mock function with given fields: opts
func (_m *MockICrossChainRegistryCaller) GetActiveGenerationReservationCount(opts *bind.CallOpts) (*big.Int, error) {
	ret := _m.Called(opts)

	if len(ret) == 0 {
		panic("no return value specified for GetActiveGenerationReservationCount")
	}

	var r0 *big.Int
	var r1 error
	if rf, ok := ret.Get(0).(func(*bind.CallOpts) (*big.Int, error)); ok {
		return rf(opts)
	}
	if rf, ok := ret.Get(0).(func(*bind.CallOpts) *big.Int); ok {
		r0 = rf(opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*big.Int)
		}
	}

	if rf, ok := ret.Get(1).(func(*bind.CallOpts) error); ok {
		r1 = rf(opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetActiveGenerationReservationsByRange provides a mock function with given fields: opts, startIndex, endIndex
func (_m *MockICrossChainRegistryCaller) GetActiveGenerationReservationsByRange(opts *bind.CallOpts, startIndex *big.Int, endIndex *big.Int) ([]ICrossChainRegistry.OperatorSet, error) {
	ret := _m.Called(opts, startIndex, endIndex)

	if len(ret) == 0 {
		panic("no return value specified for GetActiveGenerationReservationsByRange")
	}

	var r0 []ICrossChainRegistry.OperatorSet
	var r1 error
	if rf, ok := ret.Get(0).(func(*bind.CallOpts, *big.Int, *big.Int) ([]ICrossChainRegistry.OperatorSet, error)); ok {
		return rf(opts, startIndex, endIndex)
	}
	if rf, ok := ret.Get(0).(func(*bind.CallOpts, *big.Int, *big.Int) []ICrossChainRegistry.OperatorSet); ok {
		r0 = rf(opts, startIndex, endIndex)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]ICrossChainRegistry.OperatorSet)
		}
	}

	if rf, ok := ret.Get(1).(func(*bind.CallOpts, *big.Int, *big.Int) error); ok {
		r1 = rf(opts, startIndex, endIndex)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CalculateOperatorTableBytes provides a mock function with given fields: opts, operatorSet
func (_m *MockICrossChainRegistryCaller) CalculateOperatorTableBytes(opts *bind.CallOpts, operatorSet ICrossChainRegistry.OperatorSet) ([]byte, error) {
	ret := _m.Called(opts, operatorSet)

	if len(ret) == 0 {
		panic("no return value specified for CalculateOperatorTableBytes")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(*bind.CallOpts, ICrossChainRegistry.OperatorSet) ([]byte, error)); ok {
		return rf(opts, operatorSet)
	}
	if rf, ok := ret.Get(0).(func(*bind.CallOpts, ICrossChainRegistry.OperatorSet) []byte); ok {
		r0 = rf(opts, operatorSet)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(*bind.CallOpts, ICrossChainRegistry.OperatorSet) error); ok {
		r1 = rf(opts, operatorSet)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMockICrossChainRegistryCaller creates a new instance of MockICrossChainRegistryCaller. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockICrossChainRegistryCaller(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockICrossChainRegistryCaller {
	mock := &MockICrossChainRegistryCaller{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
