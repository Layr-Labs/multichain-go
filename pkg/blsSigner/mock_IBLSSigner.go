// Code generated by mockery v2.42.3. DO NOT EDIT.

package blsSigner

import (
	bn254 "github.com/Layr-Labs/crypto-libs/pkg/bn254"
	mock "github.com/stretchr/testify/mock"
)

// MockIBLSSigner is an autogenerated mock type for the IBLSSigner type
type MockIBLSSigner struct {
	mock.Mock
}

// GetPublicKey provides a mock function with given fields:
func (_m *MockIBLSSigner) GetPublicKey() (*bn254.PublicKey, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetPublicKey")
	}

	var r0 *bn254.PublicKey
	var r1 error
	if rf, ok := ret.Get(0).(func() (*bn254.PublicKey, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *bn254.PublicKey); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bn254.PublicKey)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SignBytes provides a mock function with given fields: data
func (_m *MockIBLSSigner) SignBytes(data [32]byte) (*bn254.Signature, error) {
	ret := _m.Called(data)

	if len(ret) == 0 {
		panic("no return value specified for SignBytes")
	}

	var r0 *bn254.Signature
	var r1 error
	if rf, ok := ret.Get(0).(func([32]byte) (*bn254.Signature, error)); ok {
		return rf(data)
	}
	if rf, ok := ret.Get(0).(func([32]byte) *bn254.Signature); ok {
		r0 = rf(data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bn254.Signature)
		}
	}

	if rf, ok := ret.Get(1).(func([32]byte) error); ok {
		r1 = rf(data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMockIBLSSigner creates a new instance of MockIBLSSigner. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockIBLSSigner(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockIBLSSigner {
	mock := &MockIBLSSigner{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
