// Code generated by mockery v2.42.3. DO NOT EDIT.

package chainManager

import mock "github.com/stretchr/testify/mock"

// MockIChainManager is an autogenerated mock type for the IChainManager type
type MockIChainManager struct {
	mock.Mock
}

// AddChain provides a mock function with given fields: cfg
func (_m *MockIChainManager) AddChain(cfg *ChainConfig) error {
	ret := _m.Called(cfg)

	if len(ret) == 0 {
		panic("no return value specified for AddChain")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*ChainConfig) error); ok {
		r0 = rf(cfg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetChainForId provides a mock function with given fields: chainId
func (_m *MockIChainManager) GetChainForId(chainId uint64) (*Chain, error) {
	ret := _m.Called(chainId)

	if len(ret) == 0 {
		panic("no return value specified for GetChainForId")
	}

	var r0 *Chain
	var r1 error
	if rf, ok := ret.Get(0).(func(uint64) (*Chain, error)); ok {
		return rf(chainId)
	}
	if rf, ok := ret.Get(0).(func(uint64) *Chain); ok {
		r0 = rf(chainId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Chain)
		}
	}

	if rf, ok := ret.Get(1).(func(uint64) error); ok {
		r1 = rf(chainId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMockIChainManager creates a new instance of MockIChainManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockIChainManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockIChainManager {
	mock := &MockIChainManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
